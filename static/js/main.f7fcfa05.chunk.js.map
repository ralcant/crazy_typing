{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","handleChange","event","setState","word","target","value","preventDefault","changeCase","letter","toUpperCase","toLowerCase","handleSubmit","e","convertText","state","console","log","changed","addAnEntry","result","i","length","Math","random","getNumberOfEntries","fetch","url","then","res","json","currNumRequest","lastNumRequests","ableToLoadMore","error","headers","method","data","componentDidMount","entryMessage","timer","setInterval","resetWord","clearInterval","this","numRequests","className","Form","onSubmit","Control","as","onChange","Button","variant","type","onClick","Col","md","disabled","text","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f7fcfa05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect} from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n// import \"socket.io\"\n\n// import {useRef} from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\n// const io = require('socket.io')();\n// import openSocket from 'socket.io-client';\n// let myURL = \"localhost:5000\";\n// const socket = require('socket.io').connect(myURL);\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      word: \"\",\n      entryMessage: \"\",\n      convertText: \"\",\n      changed: false,\n      lastNumRequests: null,\n      ableToLoadMore: false,\n      currNumRequest: 0,\n    };\n    this.url = \"http://608dev-2.net/sandbox/sc/ralcanta/crazy_typing/server.py\";\n  }\n  handleChange = (event)=>{\n    this.setState({word: event.target.value});\n    event.preventDefault();\n  }\n  changeCase = (letter) => {\n    return (letter === letter.toUpperCase()) ? letter.toLowerCase() : letter.toUpperCase();\n  }\n  handleSubmit = (e) =>{\n    let convertText = this.convertText(this.state.word);\n    console.log(convertText);\n    // document.getElementById(\"crazy_output\").innerText = convertText;\n    this.setState({\n      changed: true,\n      convertText: convertText\n    });\n    this.addAnEntry();\n    e.preventDefault();\n\n  }\n  convertText = (word) => {\n    let result = \"\";\n    for (let i = 0; i < word.length; i++){\n      let changedOrNot = Math.random() < 0.5 ? word[i] : this.changeCase(word[i]);\n      result += changedOrNot;\n    }\n    return result;\n  }\n  getNumberOfEntries = () =>{\n    fetch(this.url)\n    .then(res => res.json())\n    .then(res => {\n      this.setState({ //every time we can get the request, we save it in current\n        currNumRequest: res,\n        lastNumRequests: res,\n        ableToLoadMore: true,\n      });\n    },\n    (error) => {\n        this.setState({\n          ableToLoadMore: false,\n        });\n      }\n    )\n  }\n  addAnEntry = () =>{\n    // io.emit('new_entry');\n    let postParams = {\n      headers: {\n        \"content-type\": \"applications/jsons; charset=UTF-8\"\n      },\n      method:\"POST\"\n    }\n    fetch(this.url, postParams)\n    .then(data => data.json)\n    .then(res => console.log(res))\n  }\n  componentDidMount = () =>{\n    this.getNumberOfEntries();\n    // console.log(response);\n    let entryMessage = \"Why not type like this?\";\n    this.setState({\n      entryMessage: this.convertText(entryMessage)\n    });\n\n    this.timer = setInterval(() => {\n      console.log(\"Trying to get...\");\n      this.getNumberOfEntries();\n    }, 1000);\n\n    // this.setupSocketClient();\n  }\n  // setupSocketClient = () =>{\n  //   // var io = socket.connect(\"http://localhost:5000/\");\n  //   // io.on('connect', ()=>{\n  //   //   console.log(\"socked succesfully connected!\");\n  //   // })\n\n  // }\n  componentWillUnmount(){\n    console.log(\"clearing timer...\");\n    clearInterval(this.timer);\n  }\n  resetWord = () =>{\n    this.setState({\n      word: \"\",\n      convertText: \"\",\n      changed: false,\n    });\n  }\n  render(){\n    let numRequests = this.state.ableToLoadMore ? this.state.currNumRequest: this.state.lastNumRequests;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Bored of normal typing?\n          </p>\n          <h1 className=\"title\"> {this.state.entryMessage}</h1>\n          <Form onSubmit ={this.handleSubmit}>\n            <p>Try typing <i>anything</i> (even code!) and see it <i>CHaNGeD</i></p>\n            <Form.Control as=\"textarea\"  value = {this.state.word} onChange= {this.handleChange}/>\n            <Button variant=\"primary\" type=\"submit\" className=\"separated\">\n              ChAnGe It\n            </Button>\n\n            <Button variant=\"danger\" onClick = {this.resetWord}>\n              Reset\n            </Button>\n          </Form>\n          {\n          this.state.changed && \n          <Col md={5} className = \"output\">\n            <i>Output:</i>\n            <Form.Control disabled={true} as=\"textarea\"  value = {this.state.convertText}/>\n            <CopyToClipboard text ={this.state.convertText}>\n              <Button variant=\"info\">\n                Copy\n              </Button>\n            </CopyToClipboard>\n          </Col>\n          } \n        <p className =\"footer\">\n          Do you think this is useless? Me too! <br></br>\n          However, this has been used <i className=\"num_times\">{numRequests} times</i>  already. So, who knows?\n        </p>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}